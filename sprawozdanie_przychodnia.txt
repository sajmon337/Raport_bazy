Sprawozdanie: Projekt i optymalizacja bazy danych dla przychodni
===============================================================

:author: Mateusz Brokos
:date: 2025-07-06
:course: Bazy Danych 1
:instructor: Piotr Czaja

Wprowadzenie
------------

Celem tego raportu jest przedstawienie pełnego procesu projektowania i optymalizacji bazy danych
wspierającej rejestrację oraz obsługę wizyt lekarskich w przychodni. Raport obejmuje:
- model konceptualny, logiczny i fizyczny,
- analizę normalizacji,
- strategie i przykłady optymalizacji wydajności,
- prezentację skryptów pomocniczych z docstringami,
- wnioski końcowe.

Opis bazy danych
----------------

Model Konceptualny
==================

.. code-block:: none

           +-----------+      1       *      +-----------+
           |  Pacjent  |---------------------|   Wizyta  |
           +-----------+                     +-----------+
           | PK: id    |                     | PK: id    |
           +-----------+                     +-----------+
                ^  \
                |   \
         umawia się   \
           (1..*)      v
           +-----------+
           |  Lekarz   |
           +-----------+
           | PK: id    |
           +-----------+

Legenda
  • Pacjent – może umawiać wiele wizyt (1..*)  
  • Wizyta – dotyczy jednego pacjenta i jednego lekarza  
  • Lekarz – może prowadzić wiele wizyt (1..*)

Model Logiczny
==============

.. code-block:: none

  +-------------+       +------------+       +-----------+
  |   Pacjent   |       |   Lekarz   |       |   Wizyta  |
  +-------------+       +------------+       +-----------+
  | PK: patient_id    | PK: doctor_id   | PK: visit_id    |
  | first_name        | first_name      | patient_id (FK) |
  | last_name         | last_name       | doctor_id  (FK) |
  | pesel             | specialization_id (FK)| visit_datetime |
  | birth_date        +------------+---+| status         |
  | email             | specialization_id → Specialization | notes          |
  | phone             |                |
  +-------------+     +--------------+    

Dodatkowa encja:

.. code-block:: none

  +--------------------+
  |  Specialization    |
  +--------------------+
  | PK: specialization_id |
  | name               |
  +--------------------+

Relacje
  • Visit.patient_id → Patient.patient_id (1:N)  
  • Visit.doctor_id  → Doctor.doctor_id  (1:N)  
  • Doctor.specialization_id → Specialization.specialization_id (1:N)

Model Fizyczny
==============

.. code-block:: sql

    CREATE TABLE Specialization (
        specialization_id SERIAL PRIMARY KEY,
        name VARCHAR(100) UNIQUE
    );

    CREATE TABLE Doctor (
        doctor_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        license_number VARCHAR(20) UNIQUE NOT NULL,
        specialization_id INTEGER
            REFERENCES Specialization(specialization_id)
            ON UPDATE CASCADE ON DELETE SET NULL
    );

    CREATE TABLE Patient (
        patient_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        pesel CHAR(11) UNIQUE NOT NULL,
        birth_date DATE NOT NULL,
        email VARCHAR(100),
        phone VARCHAR(20)
    );

    CREATE TABLE Visit (
        visit_id SERIAL PRIMARY KEY,
        patient_id INTEGER NOT NULL
            REFERENCES Patient(patient_id)
            ON UPDATE CASCADE ON DELETE CASCADE,
        doctor_id INTEGER NOT NULL
            REFERENCES Doctor(doctor_id)
            ON UPDATE CASCADE ON DELETE CASCADE,
        visit_datetime TIMESTAMP NOT NULL,
        status VARCHAR(20) NOT NULL,
        notes TEXT
    );

Przykładowe rekordy
===================

Tabela Specialization
---------------------

.. list-table::
   :header-rows: 1

   * - specialization_id
     - name
   * - 1
     - Internista
   * - 2
     - Pediatra
   * - 3
     - Kardiolog

Tabela Doctor
-------------

.. list-table::
   :header-rows: 1

   * - doctor_id
     - first_name
     - last_name
     - license_number
     - specialization_id
   * - 1
     - Anna
     - Nowak
     - PWZ123456
     - 1
   * - 2
     - Paweł
     - Kowalski
     - PWZ654321
     - 2

Tabela Patient
--------------

.. list-table::
   :header-rows: 1

   * - patient_id
     - first_name
     - last_name
     - pesel
     - birth_date
     - email
     - phone
   * - 1
     - Maria
     - Wiśniewska
     - 90010112345
     - 1990-01-01
     - maria@example.com
     - +48123123123
   * - 2
     - Tomasz
     - Dąbrowski
     - 85050554321
     - 1985-05-05
     - tomasz@example.com
     - +48987654321

Tabela Visit
-------------

.. list-table::
   :header-rows: 1

   * - visit_id
     - patient_id
     - doctor_id
     - visit_datetime
     - status
     - notes
   * - 1
     - 1
     - 1
     - 2025-06-01 10:30:00
     - zaplanowana
     - "Pierwsza wizyta"
   * - 2
     - 2
     - 2
     - 2025-06-02 14:00:00
     - odbyta
     - "Kontrola po leczeniu"

Analiza normalizacji
--------------------

Model logiczny jest w 3NF:
- Każda tabela ma pojedynczy klucz główny.
- Atrybuty niekluczowe zależą wyłącznie od klucza.
- Brak zależności przechodnich (specjalizacja wydzielona osobno).

Potencjalne problemy wydajnościowe
----------------------------------

- Brak indeksów poza kluczami głównymi.
- Częste filtrowanie po `visit_datetime` i `doctor_id` wymaga skanów.

Strategie optymalizacji
-----------------------

**1. Indeksy**

.. code-block:: sql

    CREATE INDEX idx_visit_patient    ON Visit(patient_id);
    CREATE INDEX idx_visit_doctor     ON Visit(doctor_id);
    CREATE INDEX idx_visit_date       ON Visit(visit_datetime);
    CREATE INDEX idx_visit_doc_date   ON Visit(doctor_id, visit_datetime);

**2. Partycjonowanie**

- Partycjonuj tabelę `Visit` według miesiąca `visit_datetime`.

**3. Widoki materializowane**

.. code-block:: sql

    CREATE MATERIALIZED VIEW mv_daily_visits AS
    SELECT DATE(visit_datetime) AS day,
           doctor_id,
           COUNT(*) AS total
    FROM Visit
    GROUP BY day, doctor_id;

**4. Optymalizacja zapytań**

- Używaj `EXPLAIN (ANALYZE, BUFFERS)` do analizy planów.
- Unikaj `SELECT *`, wybieraj konkretne kolumny.

Przykład optymalizacji:

.. code-block:: sql

    -- Przed optymalizacją:
    SELECT p.first_name, p.last_name, COUNT(*) AS cnt
    FROM Visit v
    JOIN Patient p ON v.patient_id = p.patient_id
    WHERE v.visit_datetime BETWEEN '2025-06-01' AND '2025-12-31'
    GROUP BY p.first_name, p.last_name;

    -- Po (z indeksem na visit_datetime):
    EXPLAIN ANALYZE
    SELECT p.first_name, p.last_name, COUNT(*) AS cnt
    FROM Visit v
    JOIN Patient p ON v.patient_id = p.patient_id
    WHERE v.visit_datetime BETWEEN '2025-06-01' AND '2025-12-31'
    GROUP BY p.first_name, p.last_name
    LIMIT 10;

Prezentacja skryptów wspomagających
===================================

*Autorzy: [Imiona i nazwiska osób w grupie]*

.. code-block:: python

    import sqlite3
    import pandas as pd

    class ClinicDB:
        """
        Klasa do obsługi bazy danych kliniki SQLite z wykorzystaniem Pandas.

        Atrybuty:
            conn (sqlite3.Connection): Połączenie z bazą.
        """

        def __init__(self, db_path='clinic.db'):
            """
            Inicjalizuje połączenie z bazą.
            """
            self.conn = sqlite3.connect(db_path)

        def get_all_patients(self):
            """
            Zwraca DataFrame ze wszystkimi pacjentami.
            """
            return pd.read_sql("SELECT * FROM Patient", self.conn)

        def find_patients_by_name(self, name_part):
            """
            Wyszukuje pacjentów po fragmencie imienia/nazwiska.
            """
            q = "SELECT * FROM Patient WHERE first_name LIKE ? OR last_name LIKE ?"
            return pd.read_sql(q, self.conn, params=(f"%{name_part}%",)*2)

    .. code-block:: python

        import sqlite3
        import time

        def measure_sqlite_queries(db_path, queries):
            """
            Mierzy czas wykonania zapytań SQL na SQLite.
            """
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            for q in queries:
                t0 = time.time()
                cur.execute(q)
                rows = cur.fetchall()
                print(f"Czas: {time.time()-t0:.4f}s, wierszy: {len(rows)}")
            conn.close()

    .. code-block:: python

        import sqlite3
        import pandas as pd
        import matplotlib.pyplot as plt

        def generate_reports(db_path="clinic.db"):
            """
            Generuje raporty i wykresy z danych kliniki.
            """
            conn = sqlite3.connect(db_path)
            df = pd.read_sql("SELECT * FROM Visit", conn)
            # ... wykresy ...
            conn.close()

Wnioski
-------

- Model w 3NF minimalizuje redundancję i ułatwia utrzymanie.  
- Indeksy i widoki materializowane znacząco przyspieszą zapytania analityczne.  
- Regularne analizowanie planów (`EXPLAIN ANALYZE`) pozwoli wychwycić wąskie gardła.  

Repozytorium
------------

Link do pełnego kodu i dokumentacji:  

